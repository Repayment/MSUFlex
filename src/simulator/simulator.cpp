#include "simulator/simulator.h"

#include <vector>
#include <iostream>

#include "simulator/simulation_data.h"
#include "simulator/simulator_utilities.h"

namespace khnum {


SimulatorResult Simulator::CalculateMids(const std::vector<Flux> &fluxes, bool calculate_jacobian) {
    SimulatorResult result;
    std::vector<EmuAndMid>& simulated_mids = result.simulated_mids;
    simulated_mids.resize(total_mids_to_simulate_);

    std::vector<std::vector<EmuAndMid>>& diff_results = result.diff_results;
    diff_results.resize(total_free_fluxes_);
    for (std::vector<EmuAndMid>& vec : diff_results) {
        vec.resize(total_mids_to_simulate_);
    }

    std::vector<std::vector<Mid>> saved_mids(total_networks_);
    // contains MID's derivative at [free_flux][network][i]
    std::vector<std::vector<std::vector<Mid>>> saved_diff_mids(total_free_fluxes_);
    for (auto& vec : saved_diff_mids) {
        vec.resize(total_networks_);
    }

    for (size_t network_num = 0; network_num < total_networks_; ++network_num) {
        SimulatorNetworkData& network = networks_[network_num];
        simulator_utilities::FillFluxMatrix(network.symbolic_A, fluxes, network.A);
        simulator_utilities::FillFluxMatrix(network.symbolic_B, fluxes, network.B);
        simulator_utilities::FillYMatrix(network.Y_data,input_mids_, saved_mids,
                                         network.convolutions, network.Y);
        const Matrix BY = network.B * network.Y;
        const Matrix X = network.A.householderQr().solve(BY);
        simulator_utilities::SaveNewEmus(X, network.usefull_emus, network.final_emus, saved_mids[network_num], simulated_mids);

        if (!calculate_jacobian) {
            continue;
        }
        for (size_t flux = 0; flux < total_free_fluxes_; ++flux) {
            DerivativeData& derivatives = network.derivatives[flux];
            simulator_utilities::FillDiffYMatrix(network.Y_data, saved_diff_mids[flux], network.convolutions,
                                                 input_mids_, saved_mids, derivatives.dY);
            // Right Part of A * dX = (...)
            Matrix RightPart = derivatives.dB * network.Y + network.B * derivatives.dY - derivatives.dA * X;
            Matrix dX = network.A.householderQr().solve(RightPart);
            simulator_utilities::SaveNewEmus(dX, network.usefull_emus, network.final_emus,
                                             saved_diff_mids[flux][network_num], diff_results[flux]);
        }
    }

    int position = 0;
    for (EmuAndMid& mid : simulated_mids) {
        Matrix vec(mid.mid.size(), 1);
        for (int i = 0; i < mid.mid.size(); ++i) {
            vec(i, 0) = mid.mid[i];
        }
        Matrix corrected = corrections[position] * vec;
        for (int i = 0; i < mid.mid.size(); ++i) {
            mid.mid[i] = corrected(i, 0);
        }
        mid.mid = Normalize(mid.mid);
        ++position;
    }

    return result;
}

Simulator::Simulator(const std::vector<SimulatorNetworkData>& networks,
                     const std::vector<EmuAndMid>& input_mids,
                     const size_t total_mids_to_simulate) :
                                            total_networks_{networks.size()},
                                            total_free_fluxes_{networks[0].derivatives.size()},
                                            total_mids_to_simulate_{total_mids_to_simulate},
                                            input_mids_{input_mids},
                                            networks_{networks} {
    Matrix ala_L_c_111(4, 4);
    ala_L_c_111 << 0.9907, 0, 0, 0,
                   0.0052, 0.9907, 0, 0,
                   0.0041, 0.0052, 0.9907, 0,
                   0, 0.0041, 0.0052, 0.9907;
    corrections.push_back(ala_L_c_111);

    Matrix arg_L_c_111111(7, 7);
    arg_L_c_111111 << 0.9790, 0, 0, 0, 0, 0, 0,
                      0.0168, 0.9790, 0, 0, 0, 0, 0,
                      0.0041, 0.0168, 0.9790, 0, 0, 0, 0,
                      0, 0.0041, 0.0168, 0.9790, 0, 0, 0,
                      0, 0, 0.0041, 0.0168, 0.9790, 0, 0,
                      0, 0, 0, 0.0041, 0.0168, 0.9790, 0,
                      0, 0, 0, 0, 0.0041, 0.0168, 0.9790;
    corrections.push_back(arg_L_c_111111);

    Matrix asp_L_c_1111(5, 5);
    asp_L_c_1111 << 0.9859, 0, 0, 0, 0,
                    0.0059, 0.9859, 0, 0, 0,
                    0.0081, 0.0059, 0.9859, 0, 0,
                    0, 0.0081, 0.0059, 0.9859, 0,
                    0, 0, 0.0081, 0.0059, 0.9859;
    corrections.push_back(asp_L_c_1111);

    Matrix gly_c_11(3, 3);
    gly_c_11 << 0.9909, 0, 0,
                0.0050, 0.9909, 0,
                0.0041, 0.0050, 0.9909;
    corrections.push_back(gly_c_11);

    Matrix his_L_c_111111(7, 7);
    his_L_c_111111 << 0.983181696089220,0,0,0,0,0,0,
    0.0126611657248793,0.983181696089220,0,0,0,0,0,
    0.00410206694462036,0.0126611657248793,0.983181696089220,0,0,0,0,
    5.06358034586305e-05,0.00410206694462036,0.0126611657248793,0.983181696089220,0,0,0,
    4.38443439832638e-06,5.06358034586305e-05,0.00410206694462036,0.0126611657248793,0.983181696089220,0,0,
    5.07830371068528e-08,4.38443439832638e-06,5.06358034586305e-05,0.00410206694462036,0.0126611657248793,0.983181696089220,0,
    2.19978042106849e-10,5.07830371068528e-08,4.38443439832638e-06,5.06358034586305e-05,0.00410206694462036,0.0126611657248793,0.983181696089220;
    corrections.push_back(his_L_c_111111);

    Matrix ile_L_c_111111(7, 7);
    ile_L_c_111111 << 0.990002522070792,0,0,0,0,0,0,
    0.00589112451477398,0.990002522070792,0,0,0,0,0,
    0.00407944377805516,0.00589112451477398,0.990002522070792,0,0,0,0,
    2.26723918037867e-05,0.00407944377805516,0.00589112451477398,0.990002522070792,0,0,0,
    4.21549662364356e-06,2.26723918037867e-05,0.00407944377805516,0.00589112451477398,0.990002522070792,0,0,
    2.17205180126142e-08,4.21549662364356e-06,2.26723918037867e-05,0.00407944377805516,0.00589112451477398,0.990002522070792,0,
    2.74158935068824e-11,2.17205180126142e-08,4.21549662364356e-06,2.26723918037867e-05,0.00407944377805516,0.00589112451477398,0.990002522070792;
    corrections.push_back(ile_L_c_111111);

    Matrix lys_L_c_111111(7, 7);
    lys_L_c_111111 << 0.876307932619405,0,0,0,0,0,0,
    0.110843933912801,0.876307932619405,0,0,0,0,0,
    0.0118759549042786,0.110843933912801,0.876307932619405,0,0,0,0,
    0.000912728254996272,0.0118759549042786,0.110843933912801,0.876307932619405,0,0,0,
    5.64135793280816e-05,0.000912728254996272,0.0118759549042786,0.110843933912801,0.876307932619405,0,0,
    2.90789689506381e-06,5.64135793280816e-05,0.000912728254996272,0.0118759549042786,0.110843933912801,0.876307932619405,0,
    1.24253596604666e-07,2.90789689506381e-06,5.64135793280816e-05,0.000912728254996272,0.0118759549042786,0.110843933912801,0.876307932619405;
    corrections.push_back(lys_L_c_111111);

    Matrix met_L_c_11111(6, 6);
    met_L_c_11111 << 0.940025587655125,0,0,0,0,0,
    0.0129032502250353,0.940025587655125,0,0,0,0,
    0.0463961873930687,0.0129032502250353,0.940025587655125,0,0,0,
    0.000492699668191514,0.0463961873930687,0.0129032502250353,0.940025587655125,0,0,
    0.000180287986475279,0.000492699668191514,0.0463961873930687,0.0129032502250353,0.940025587655125,0,
    1.80013744966397e-06,0.000180287986475279,0.000492699668191514,0.0463961873930687,0.0129032502250353,0.940025587655125;
    corrections.push_back(met_L_c_11111);

    Matrix phe_L_c(10, 10);
    phe_L_c << 0.990230261935242,0,0,0,0,0,0,0,0,0,
    0.00566470055233067,0.990230261935242,0,0,0,0,0,0,0,0,
    0.00407906608221750,0.00566470055233067,0.990230261935242,0,0,0,0,0,0,0,
    2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242,0,0,0,0,0,0,
    4.21141179697173e-06,2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242,0,0,0,0,0,
    2.07564909081171e-08,4.21141179697173e-06,2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242,0,0,0,0,
    2.25919495357998e-11,2.07564909081171e-08,4.21141179697173e-06,2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242,0,0,0,
    1.22895419505626e-14,2.25919495357998e-11,2.07564909081171e-08,4.21141179697173e-06,2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242,0,0,
    4.11929462573902e-18,1.22895419505626e-14,2.25919495357998e-11,2.07564909081171e-08,4.21141179697173e-06,2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242,0,
    9.30842226231510e-22,4.11929462573902e-18,1.22895419505626e-14,2.25919495357998e-11,2.07564909081171e-08,4.21141179697173e-06,2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242;
    corrections.push_back(phe_L_c);

    Matrix pro_L_c_11111(6, 6);
    pro_L_c_11111 << 0.990458054188897,0,0,0,0,0,
    0.00543817210514712,0.990458054188897,0,0,0,0,
    0.00407874040401678,0.00543817210514712,0.990458054188897,0,0,0,
    2.08059500813452e-05,0.00407874040401678,0.00543817210514712,0.990458054188897,0,0,
    4.20754071614855e-06,2.08059500813452e-05,0.00407874040401678,0.00543817210514712,0.990458054188897,0,
    1.97931448357129e-08,4.20754071614855e-06,2.08059500813452e-05,0.00407874040401678,0.00543817210514712,0.990458054188897;
    corrections.push_back(pro_L_c_11111);

    Matrix ser_L_c_111(4, 4);
    ser_L_c_111 << 0.988278532109620,0,0,0,
    0.00557533573859141,0.988278532109620,0,0,
    0.00610144258268882,0.00557533573859141,0.988278532109620,0,
    3.20576944928186e-05,0.00610144258268882,0.00557533573859141,0.988278532109620;
    corrections.push_back(ser_L_c_111);

    Matrix thr_L_c_1111(5, 5);
    thr_L_c_1111 << 0.988051241117218,0,0,0,0,
    0.00580133140752339,0.988051241117218,0,0,0,
    0.00610133458132222,0.00580133140752339,0.988051241117218,0,0,
    3.34535657917255e-05,0.00610133458132222,0.00580133140752339,0.988051241117218,0,
    1.25666404814736e-05,3.34535657917255e-05,0.00610133458132222,0.00580133140752339,0.988051241117218;
    corrections.push_back(thr_L_c_1111);

    Matrix tyr_L_c(10, 10);
    tyr_L_c << 0.987824002398739,0,0,0,0,0,0,0,0,0,
    0.00602722282952390,0.987824002398739,0,0,0,0,0,0,0,0,
    0.00610127857481484,0.00602722282952390,0.987824002398739,0,0,0,0,0,0,0,
    3.48490942100291e-05,0.00610127857481484,0.00602722282952390,0.987824002398739,0,0,0,0,0,0,
    1.25715244457918e-05,3.48490942100291e-05,0.00610127857481484,0.00602722282952390,0.987824002398739,0,0,0,0,0,
    6.68718297200651e-08,1.25715244457918e-05,3.48490942100291e-05,0.00610127857481484,0.00602722282952390,0.987824002398739,0,0,0,0,
    8.66381870143556e-09,6.68718297200651e-08,1.25715244457918e-05,3.48490942100291e-05,0.00610127857481484,0.00602722282952390,0.987824002398739,0,0,0,
    4.25716509808272e-11,8.66381870143556e-09,6.68718297200651e-08,1.25715244457918e-05,3.48490942100291e-05,0.00610127857481484,0.00602722282952390,0.987824002398739,0,0,
    4.63222758590705e-14,4.25716509808272e-11,8.66381870143556e-09,6.68718297200651e-08,1.25715244457918e-05,3.48490942100291e-05,0.00610127857481484,0.00602722282952390,0.987824002398739,0,
    2.51960549108907e-17,4.63222758590705e-14,4.25716509808272e-11,8.66381870143556e-09,6.68718297200651e-08,1.25715244457918e-05,3.48490942100291e-05,0.00610127857481484,0.00602722282952390,0.987824002398739;
    corrections.push_back(tyr_L_c);

    Matrix val_L_c(6, 6);
    val_L_c << 0.990230261935242,0,0,0,0,0,
    0.00566470055233067,0.990230261935242,0,0,0,0,
    0.00407906608221750,0.00566470055233067,0.990230261935242,0,0,0,
    2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242,0,0,
    4.21141179697173e-06,2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242,0,
    2.07564909081171e-08,4.21141179697173e-06,2.17392393180515e-05,0.00407906608221750,0.00566470055233067,0.990230261935242;
    corrections.push_back(val_L_c);



}
} // namespace khnum